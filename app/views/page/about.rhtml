<%= render :partial => "shared/ad" %>
<div class="page-heading">About Source Stats</div>
<p>
  I am creating this new stats program for games that use <a href="http://developer.valvesoftware.com/wiki/HL_Log_Standard">the valve logging standard</a>. 
  To the best of my knowledge there are no stats applications out there made with Ruby on Rails. 
  I think Rails will lower the barrier to entry for server admins that want to host their own stats without paying for it.      

</p>
<p>
	&lt;RANT&gt;The current state of L4D2 logs is a mess.&lt;/RANT&gt;  <a href="http://forums.steampowered.com/forums/showthread.php?t=1108577">Read my post</a> on the L4D2 steam forums to get a better idea of what I'm talking about.  If you support these improvements to the logging system for L4D2 please reply to that thread and say so.  Supporting L4D2 requires considerable deviation from <a href="http://developer.valvesoftware.com/wiki/HL_Log_Standard">the valve logging standard</a> without the use of mods.
</p>
<p>
  During the development of this application you can expect the server list and statistics to reset frequently and without warning.
  There will also be discrepancies in the data as I work on various ways to calculate the scores and reports.
</p>
<p>
  My eventual goal for this application is to deliver game data in a less technical and more user friendly manner.  I want
  to highlight the mechanics of the game more than the raw data that is being processed.  By emphasizing map objectives
  and events like dominations and defenses I feel the stats become more about playing the game.  Less about raw PWNAGE.
</p>
<p>
  At this point I have a very loose concept of what I am going to try to achieve.  It may take awhile.  What I won't be doing is 
  bothering to make google maps, charts and graphs of activity or trying to conjure up some phony analogy to military ranks.
  If you have any suggestions or questions you can use the comments system <a href="http://unrife.net/2009/06/09/source-dedicated-server-statistics">my blog post about Source Stats</a>.
</p>
<p>
  TF2 Class icons created by <a href="http://Captain-Nintendork.deviantart.com/">Captain Nintendork</a><br/>
</p>  

<br/>
<hr size='1' width='650' align="left" />
<br/>

<div class="page-heading">Can't host your own stats? Help me!</div>
<p>
While I am developing this program, I could really use test data.  Not for just L4D2 but all source based games.  If you want to help me out you only need to add two lines to your server.cfg:<br/>
<blockquote>
	log on<br/>
	logaddress_add 127.0.0.1:20808
</blockquote>
<br/>
After that your server will send log data to this site.  If you use another program like <a hrefe="http://www.hlxcommunity.com/">HLStatsX CE</a>, keep that logaddress_add line in your server.cfg and it'll send to both.
</p>

<br/>
<hr size='1' width='650' align="left" />
<br/>

<div class="page-heading">Want to run Sourcestats on your own server?</div>
<p>
	I have put Sourcestats onto GitHub you can view the project page at the following url: <a href="http://github.com/zkarpinski/Sourcestats">http://github.com/zkarpinski/Sourcestats</a>.  Currently you have to be pretty familiar with Git, Ruby on Rails and MySQL in order to get this working.  I do not have any documentation written yet. 
	<br/>
	<br/>
	Assuming you already have a web server and database (mysql) up and running, here are some hints.  All commands assume you're on linux so change paths and commands as required for Windows.<br/>
	<ol>
		<li>Install <a href="http://rubyonrails.org/">Ruby on Rails</a></li>
		<li>Install <a href="http://git-scm.com/download">Git</a></li>
		<li>Configure your web server to run Rails &mdash; For Apache <a href="http://modrails.com/install.html">Passenger Phusion</a> is a good start</li>
		<li>Check out sourcestats from git to your server's site folder<br /><blockquote>git clone http://github.com/zkarpinski/Sourcestats.git sourcestats</blockquote></li>
		<li>Edit your web server's configuration to serve a site from the directory in the previous step</li>
		<li>Passenger Phusion users should remember to use "RailsEnv production"</li>
		<li>Edit config/database.yml to create your username, password and database name &mdash; This example uses sourcestats_production</li>
		<li>Using mysql create the database and assign privileges to your user.  
			<blockquote>
				create database sourcestats_production;<br/>
				grant all on sourcestats_production.* to username@localhost identified by 'password';
			</blockquote>
		</li>
		<li>Install required gems:<br/><blockquote>sudo gem install steam-condenser will_paginate</blockquote>
		<li>In the main directory of your site migrate to the latest version of the DB<br />
			<blockquote>
				rake db:migrate
			</blockquote>
		</li>
		<li>In the main sourcestats directory start the log listener &mdash; Listens on UDP port 20808<br/>
			<blockquote>ruby script/runner -e production SourcestatsLogger.listen</blockquote>
		</li>
		<li>Edit the server.cfg for your source based game server<br/>
			<blockquote>
				log on<br/>
				logaddress_add 127.0.0.1:20808
			</blockquote>
		</li>
		<li>
			<b>Secure your server!</b> Load your site in a web browser after the server is sending logs.  Click the "Admin" link next to the new server.  Enter part or all of your administrative IP addresses, one per line in the appropriate field.  
		</li>
	</ol>
</p>

<p>
	You can run the log listener on a different server than your game server.  
	This is helpful if your web site runs on a different machine than your game server does.  
	You need to be sure to open port 20808 in your firewall.  
	Instead of 127.0.0.1 be sure to use the IP address of your web server.
</p>
<p>
	<b>Alternate method of sending logs</b><br/>
	If you do not want the stats to update in real-time you can process the logs during downtime using the process_logfile.rb script. Note that this process is slower than real-time logfile processing.  This will read a directory for <i>physical</i> logfiles.  It opens the files and then sends them to the log listener.  Extra data is sent along to avoid reprocessing the same log twice.  <br/><br/>
	This command takes four arguments and looks something like this:<br/>
	<blockquote>
		ruby script/runner -e development \<br/>
		ProcessLogfiles.run \<br/>
		127.0.0.1:27015 \<br/>
		127.0.0.1:20808 \<br/>
		/games/steam/left4dead2/left4dead2/logs \<br/>
		0.005
	</blockquote>
</p>
<p>
	This will process each log file once and make a record of it.  It will not process the same log twice.  The arguments are as follows:
	<ol> 
		<li>External IP:Port of the game server</li>
		<li>IP:Port of the Sourcestats log listener</li>
		<li>Path to your log files</li>
		<li>How long to wait between records - Data can get dropped if this is too low for your network latency</li>
	</ol>
</p>
<br/>
<div class="page-heading">About The Author</div>
<p>My name is Zach Karpinski.  I am a computer programmer living in Milwaukee, WI.  I currently work for <a href="http://800ceoread.com">800 CEO Read</a> where I recently created a custom e-commerce site using Ruby on Rails.  It integrates with a variety of third party services and is a major improvement over the previous site they commissioned in 2004.</p>
<p>Source Stats is not my first stats program.  I am the creator of the original <a href="http://sourceforge.net/projects/halfstats/">halfStats</a> as well as the follow up <a href="http://sourceforge.net/projects/halfstats2/">halfStats v2.0</a>.</p>
<p>The original <a href="http://sourceforge.net/projects/halfstats/">halfStats</a> was heavily focused on DM and CS for the original Half-Life game.  It processed log files line by line and created HTML files.  It was written in PERL.</p>
<p><a href="http://sourceforge.net/projects/halfstats2/">halfStats v2.0</a> was a rewrite that again used PERL.  It added MySQL database storage as well as logaddress support.  It took me way too long to finish it and I never did try to spread the word about it very much.  I gave up development on it awhile ago and let the domain name lapse in 2005.  The halfstats.com domain has been parked ever since.</p> 
<p>The regular expressions used to parse logs in Source Stats are effectively ported from the halfStats v2.0 PERL versions to Ruby.  The conceptual database structure is borrowed as well.  I converted it to be a migrations based system but the bulk of the thinking happened years ago when I was first rewriting halfStats.</p>